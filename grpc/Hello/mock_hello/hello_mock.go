// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/vamsi199/examples/grpc/Hello/pb (interfaces: HelloClient,Hello_DuplexstreamClient)

// Package mock_pb is a generated GoMock package.
package mock_pb

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	pb "github.com/vamsi199/examples/grpc/Hello/pb"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
	reflect "reflect"
)

// MockHelloClient is a mock of HelloClient interface
type MockHelloClient struct {
	ctrl     *gomock.Controller
	recorder *MockHelloClientMockRecorder
}

// MockHelloClientMockRecorder is the mock recorder for MockHelloClient
type MockHelloClientMockRecorder struct {
	mock *MockHelloClient
}

// NewMockHelloClient creates a new mock instance
func NewMockHelloClient(ctrl *gomock.Controller) *MockHelloClient {
	mock := &MockHelloClient{ctrl: ctrl}
	mock.recorder = &MockHelloClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockHelloClient) EXPECT() *MockHelloClientMockRecorder {
	return m.recorder
}

// Duplexstream mocks base method
func (m *MockHelloClient) Duplexstream(arg0 context.Context, arg1 ...grpc.CallOption) (pb.Hello_DuplexstreamClient, error) {
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Duplexstream", varargs...)
	ret0, _ := ret[0].(pb.Hello_DuplexstreamClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Duplexstream indicates an expected call of Duplexstream
func (mr *MockHelloClientMockRecorder) Duplexstream(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Duplexstream", reflect.TypeOf((*MockHelloClient)(nil).Duplexstream), varargs...)
}

// MockHello_DuplexstreamClient is a mock of Hello_DuplexstreamClient interface
type MockHello_DuplexstreamClient struct {
	ctrl     *gomock.Controller
	recorder *MockHello_DuplexstreamClientMockRecorder
}

// MockHello_DuplexstreamClientMockRecorder is the mock recorder for MockHello_DuplexstreamClient
type MockHello_DuplexstreamClientMockRecorder struct {
	mock *MockHello_DuplexstreamClient
}

// NewMockHello_DuplexstreamClient creates a new mock instance
func NewMockHello_DuplexstreamClient(ctrl *gomock.Controller) *MockHello_DuplexstreamClient {
	mock := &MockHello_DuplexstreamClient{ctrl: ctrl}
	mock.recorder = &MockHello_DuplexstreamClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockHello_DuplexstreamClient) EXPECT() *MockHello_DuplexstreamClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method
func (m *MockHello_DuplexstreamClient) CloseSend() error {
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend
func (mr *MockHello_DuplexstreamClientMockRecorder) CloseSend() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockHello_DuplexstreamClient)(nil).CloseSend))
}

// Context mocks base method
func (m *MockHello_DuplexstreamClient) Context() context.Context {
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context
func (mr *MockHello_DuplexstreamClientMockRecorder) Context() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockHello_DuplexstreamClient)(nil).Context))
}

// Header mocks base method
func (m *MockHello_DuplexstreamClient) Header() (metadata.MD, error) {
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header
func (mr *MockHello_DuplexstreamClientMockRecorder) Header() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockHello_DuplexstreamClient)(nil).Header))
}

// Recv mocks base method
func (m *MockHello_DuplexstreamClient) Recv() (*pb.DuplexOut1, error) {
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*pb.DuplexOut1)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv
func (mr *MockHello_DuplexstreamClientMockRecorder) Recv() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockHello_DuplexstreamClient)(nil).Recv))
}

// RecvMsg mocks base method
func (m *MockHello_DuplexstreamClient) RecvMsg(arg0 interface{}) error {
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg
func (mr *MockHello_DuplexstreamClientMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockHello_DuplexstreamClient)(nil).RecvMsg), arg0)
}

// Send mocks base method
func (m *MockHello_DuplexstreamClient) Send(arg0 *pb.DuplexOut) error {
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send
func (mr *MockHello_DuplexstreamClientMockRecorder) Send(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockHello_DuplexstreamClient)(nil).Send), arg0)
}

// SendMsg mocks base method
func (m *MockHello_DuplexstreamClient) SendMsg(arg0 interface{}) error {
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg
func (mr *MockHello_DuplexstreamClientMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockHello_DuplexstreamClient)(nil).SendMsg), arg0)
}

// Trailer mocks base method
func (m *MockHello_DuplexstreamClient) Trailer() metadata.MD {
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer
func (mr *MockHello_DuplexstreamClientMockRecorder) Trailer() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockHello_DuplexstreamClient)(nil).Trailer))
}
