// Code generated by protoc-gen-go. DO NOT EDIT.
// source: hello.proto

/*
Package hello is a generated protocol buffer package.

It is generated from these files:
	hello.proto

It has these top-level messages:
	Input
	Input1
	Output
	Input2
*/
package hello

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Input struct {
	Wish string `protobuf:"bytes,1,opt,name=wish" json:"wish,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
}

func (m *Input) Reset()                    { *m = Input{} }
func (m *Input) String() string            { return proto.CompactTextString(m) }
func (*Input) ProtoMessage()               {}
func (*Input) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Input) GetWish() string {
	if m != nil {
		return m.Wish
	}
	return ""
}

func (m *Input) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type Input1 struct {
	Num   int32  `protobuf:"varint,1,opt,name=num" json:"num,omitempty"`
	Alias string `protobuf:"bytes,2,opt,name=alias" json:"alias,omitempty"`
}

func (m *Input1) Reset()                    { *m = Input1{} }
func (m *Input1) String() string            { return proto.CompactTextString(m) }
func (*Input1) ProtoMessage()               {}
func (*Input1) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Input1) GetNum() int32 {
	if m != nil {
		return m.Num
	}
	return 0
}

func (m *Input1) GetAlias() string {
	if m != nil {
		return m.Alias
	}
	return ""
}

type Output struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *Output) Reset()                    { *m = Output{} }
func (m *Output) String() string            { return proto.CompactTextString(m) }
func (*Output) ProtoMessage()               {}
func (*Output) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Output) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type Input2 struct {
	AllNicknames string `protobuf:"bytes,1,opt,name=allNicknames" json:"allNicknames,omitempty"`
}

func (m *Input2) Reset()                    { *m = Input2{} }
func (m *Input2) String() string            { return proto.CompactTextString(m) }
func (*Input2) ProtoMessage()               {}
func (*Input2) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Input2) GetAllNicknames() string {
	if m != nil {
		return m.AllNicknames
	}
	return ""
}

func init() {
	proto.RegisterType((*Input)(nil), "hello.Input")
	proto.RegisterType((*Input1)(nil), "hello.Input1")
	proto.RegisterType((*Output)(nil), "hello.Output")
	proto.RegisterType((*Input2)(nil), "hello.Input2")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Hello service

type HelloClient interface {
	Sayhello(ctx context.Context, in *Input, opts ...grpc.CallOption) (*Output, error)
	SayHelloAll(ctx context.Context, in *Input1, opts ...grpc.CallOption) (*Output, error)
	StreamAll(ctx context.Context, in *Input2, opts ...grpc.CallOption) (Hello_StreamAllClient, error)
}

type helloClient struct {
	cc *grpc.ClientConn
}

func NewHelloClient(cc *grpc.ClientConn) HelloClient {
	return &helloClient{cc}
}

func (c *helloClient) Sayhello(ctx context.Context, in *Input, opts ...grpc.CallOption) (*Output, error) {
	out := new(Output)
	err := grpc.Invoke(ctx, "/hello.Hello/Sayhello", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helloClient) SayHelloAll(ctx context.Context, in *Input1, opts ...grpc.CallOption) (*Output, error) {
	out := new(Output)
	err := grpc.Invoke(ctx, "/hello.Hello/SayHelloAll", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helloClient) StreamAll(ctx context.Context, in *Input2, opts ...grpc.CallOption) (Hello_StreamAllClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Hello_serviceDesc.Streams[0], c.cc, "/hello.Hello/StreamAll", opts...)
	if err != nil {
		return nil, err
	}
	x := &helloStreamAllClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Hello_StreamAllClient interface {
	Recv() (*Output, error)
	grpc.ClientStream
}

type helloStreamAllClient struct {
	grpc.ClientStream
}

func (x *helloStreamAllClient) Recv() (*Output, error) {
	m := new(Output)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Hello service

type HelloServer interface {
	Sayhello(context.Context, *Input) (*Output, error)
	SayHelloAll(context.Context, *Input1) (*Output, error)
	StreamAll(*Input2, Hello_StreamAllServer) error
}

func RegisterHelloServer(s *grpc.Server, srv HelloServer) {
	s.RegisterService(&_Hello_serviceDesc, srv)
}

func _Hello_Sayhello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Input)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelloServer).Sayhello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hello.Hello/Sayhello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelloServer).Sayhello(ctx, req.(*Input))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hello_SayHelloAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Input1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelloServer).SayHelloAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hello.Hello/SayHelloAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelloServer).SayHelloAll(ctx, req.(*Input1))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hello_StreamAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Input2)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HelloServer).StreamAll(m, &helloStreamAllServer{stream})
}

type Hello_StreamAllServer interface {
	Send(*Output) error
	grpc.ServerStream
}

type helloStreamAllServer struct {
	grpc.ServerStream
}

func (x *helloStreamAllServer) Send(m *Output) error {
	return x.ServerStream.SendMsg(m)
}

var _Hello_serviceDesc = grpc.ServiceDesc{
	ServiceName: "hello.Hello",
	HandlerType: (*HelloServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Sayhello",
			Handler:    _Hello_Sayhello_Handler,
		},
		{
			MethodName: "SayHelloAll",
			Handler:    _Hello_SayHelloAll_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamAll",
			Handler:       _Hello_StreamAll_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "hello.proto",
}

func init() { proto.RegisterFile("hello.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 219 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xce, 0x48, 0xcd, 0xc9,
	0xc9, 0xd7, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x05, 0x73, 0x94, 0xf4, 0xb9, 0x58, 0x3d,
	0xf3, 0x0a, 0x4a, 0x4b, 0x84, 0x84, 0xb8, 0x58, 0xca, 0x33, 0x8b, 0x33, 0x24, 0x18, 0x15, 0x18,
	0x35, 0x38, 0x83, 0xc0, 0x6c, 0x90, 0x58, 0x5e, 0x62, 0x6e, 0xaa, 0x04, 0x13, 0x44, 0x0c, 0xc4,
	0x56, 0x32, 0xe0, 0x62, 0x03, 0x6b, 0x30, 0x14, 0x12, 0xe0, 0x62, 0xce, 0x2b, 0xcd, 0x05, 0x6b,
	0x60, 0x0d, 0x02, 0x31, 0x85, 0x44, 0xb8, 0x58, 0x13, 0x73, 0x32, 0x13, 0x8b, 0xa1, 0x1a, 0x20,
	0x1c, 0x25, 0x19, 0x2e, 0x36, 0xff, 0xd2, 0x12, 0xa8, 0x1d, 0x60, 0xf3, 0x18, 0x91, 0xcc, 0xd3,
	0x81, 0x9a, 0x67, 0x24, 0xa4, 0xc4, 0xc5, 0x93, 0x98, 0x93, 0xe3, 0x97, 0x99, 0x9c, 0x0d, 0x92,
	0x28, 0x86, 0xaa, 0x42, 0x11, 0x33, 0x9a, 0xc0, 0xc8, 0xc5, 0xea, 0x01, 0x72, 0xb8, 0x90, 0x26,
	0x17, 0x47, 0x70, 0x62, 0x25, 0xd8, 0x13, 0x42, 0x3c, 0x7a, 0x10, 0x9f, 0x81, 0x0d, 0x92, 0xe2,
	0x85, 0xf2, 0x20, 0x96, 0x2a, 0x31, 0x08, 0xe9, 0x72, 0x71, 0x07, 0x27, 0x56, 0x82, 0xb5, 0x39,
	0xe6, 0xe4, 0x08, 0xf1, 0x22, 0xab, 0x36, 0xc4, 0xa6, 0x9c, 0x33, 0xb8, 0xa4, 0x28, 0x35, 0x31,
	0x17, 0x43, 0xb1, 0x11, 0x86, 0x62, 0x03, 0xc6, 0x24, 0x36, 0x70, 0x78, 0x1a, 0x03, 0x02, 0x00,
	0x00, 0xff, 0xff, 0xfc, 0xfb, 0x31, 0x1b, 0x5e, 0x01, 0x00, 0x00,
}
